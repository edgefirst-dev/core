// Borrowed/modified from https://github.com/epicweb-dev/remember/blob/3131177752cb78d14c2c7bcfafbcb12fca70cdcf/index.js

declare global {
	var __remember_edgefist_dev_core: Map<symbol, unknown> | undefined;
}

/**
 * Remembers and retrieves a value by a given name, or the value generated by `getValue` if the name doesn't exist.
 * The return type is inferred from the return type of `getValue`.
 *
 * @param name The name under which to remember the value.
 * @param getValue The function that generates the value to remember.
 * @returns  The remembered value.
 */
export function remember<Value>(name: symbol, getValue: () => Value): Value {
	const thusly = globalThis;
	thusly.__remember_edgefist_dev_core ??= new Map<symbol, unknown>();
	if (!thusly.__remember_edgefist_dev_core.has(name)) {
		thusly.__remember_edgefist_dev_core.set(name, getValue());
	}
	return thusly.__remember_edgefist_dev_core.get(name) as Value;
}

/**
 * Forgets a remembered value by a given name. Does not throw if the name doesn't exist.
 *
 * @param name The name under which the value was remembered.
 * @return A remembered value existed and has been forgotten.
 */
export function forget(name: symbol) {
	const thusly = globalThis;
	thusly.__remember_edgefist_dev_core ??= new Map();
	return thusly.__remember_edgefist_dev_core.delete(name);
}
